#
# Example configuration for OAuth 2.0 bearer token configured client
#
# The %(here)s variable will be replaced with the parent directory of this file
#
[DEFAULT]
debug = true
# Uncomment and replace with the address which should receive any error reports
#email_to = you@yourdomain.com
smtp_server = localhost
error_email_from = paste@localhost

beaker_session_keyname = beaker.session.oauth2client

[server:main]
use = egg:Paste#http
host = 0.0.0.0
port = 5002

[pipeline:main]
pipeline = BeakerSessionFilter OAuth2Client App

# This filter sets up a server side session linked to a cookie.  The session
# caches authentication and authorisation state information
[filter:BeakerSessionFilter]
paste.filter_app_factory = beaker.middleware:SessionMiddleware

# Cookie name
beaker.session.key = ndg.oauth.client.session

# WSGI environ key name
environ_key = %(beaker_session_keyname)s
beaker.session.secret = somesecret
beaker.cache.data_dir = %(here)s/beaker/cache
beaker.session.data_dir = %(here)s/beaker/sessions

#beaker.session.cookie_domain = .localhost

[filter:OAuth2Client]
paste.filter_app_factory = ndg.oauth.client.wsgi.oauth2_client:Oauth2ClientMiddleware.filter_app_factory
oauth2.session_key = %(beaker_session_keyname)s
# Allowed values: bearer (which returns a UUID).  bearer is the default
#oauth2.access_token_type=bearer

# Default:
#oauth2.oauth2_token_key = oauth2client.token
# OAuth client configuration
#oauth2.client_cert = %(here)s/../shared_config/pki/localhost.crt
#oauth2.client_key = %(here)s/../shared_config/pki/localhost.key
oauth2.ca_dir = %(here)s/../shared_config/pki/ca
# ca_cert_file = 
oauth2.client_id=22
oauth2.client_secret=1992301zAj2n3nn42cjNnMqpwO

# Set scopes that the client will request. If the user authorises them, resource
# requests using any of these scopes will be authorised.
# Scope can contain any printable 7 bit ASCII characters excluding space, '"'
# and '\' - URL encode these characters.
oauth2.scope=https://localhost:5000/resource1.html
# OAuth authorization server URLs
oauth2.authorization_endpoint=https://localhost:5000/oauth/authorize
oauth2.access_token_endpoint=https://localhost:5000/oauth/access_token
# Relative base path included in OAuth client URLs
oauth2.base_url_path=/oauth2

[app:App]
paste.app_factory = ndg.oauth.client.examples:BearerTokOAuthClientApp.app_factory
resource_url = https://localhost:5000/resource1.html
client_cert = %(here)s/../shared_config/pki/localhost.crt
client_key = %(here)s/../shared_config/pki/localhost.key
ca_dir = %(here)s/../shared_config/pki/ca

# WARNING: *THE LINE BELOW MUST BE UNCOMMENTED ON A PRODUCTION ENVIRONMENT*
# Debug mode will enable the interactive debugging tool, allowing ANYONE to
# execute malicious code after an exception is raised.
#set debug = false


# Logging configuration
[loggers]
keys = root, ndg

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = INFO
handlers = console

[logger_ndg]
level = DEBUG
handlers =
qualname = ndg

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s.%(msecs)03d %(levelname)-7.7s [%(name)s:%(lineno)s] [%(threadName)s] %(message)s
datefmt = %Y-%m-%d-%H:%M:%S

